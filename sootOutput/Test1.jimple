public class Test1 extends java.lang.Object
{
    static long gotoCount;

    public static void main(java.lang.String[])
    {
        java.lang.String[] args;
        int a, b;
        long tmp;
        java.io.PrintStream tmpRef;
        java.lang.String tmpStr;

        args := @parameter0: java.lang.String[];
        a = 0;
        b = 92;
        staticinvoke <Test1: void func1(int)>(a);
        staticinvoke <Test1: void func1(int)>(b);
        tmp = <Test1: long gotoCount>;
        tmp = tmp + 1L;
        <Test1: long gotoCount> = tmp;
        tmpRef = <java.lang.System: java.io.PrintStream out>;
        virtualinvoke tmpRef.<java.io.PrintStream: void println(java.lang.String)>("Block #0");
        virtualinvoke tmpRef.<java.io.PrintStream: void println(long)>(tmp);
        return;
    }

    public static void func1(int)
    {
        int x, temp$0, temp$1, temp$2;
        long tmp;
        java.io.PrintStream tmpRef;
        java.lang.String tmpStr;

        x := @parameter0: int;
        tmp = <Test1: long gotoCount>;
        tmp = tmp + 1L;
        <Test1: long gotoCount> = tmp;
        tmpRef = <java.lang.System: java.io.PrintStream out>;
        virtualinvoke tmpRef.<java.io.PrintStream: void println(java.lang.String)>("Block #0");
        virtualinvoke tmpRef.<java.io.PrintStream: void println(long)>(tmp);
        if x == 0 goto label0;

        tmp = <Test1: long gotoCount>;
        tmp = tmp + 1L;
        <Test1: long gotoCount> = tmp;
        tmpRef = <java.lang.System: java.io.PrintStream out>;
        virtualinvoke tmpRef.<java.io.PrintStream: void println(java.lang.String)>("Block #1");
        virtualinvoke tmpRef.<java.io.PrintStream: void println(long)>(tmp);
        goto label1;

     label0:
        nop;
        temp$0 = 0;
        tmp = <Test1: long gotoCount>;
        tmp = tmp + 1L;
        <Test1: long gotoCount> = tmp;
        tmpRef = <java.lang.System: java.io.PrintStream out>;
        virtualinvoke tmpRef.<java.io.PrintStream: void println(java.lang.String)>("Block #2");
        virtualinvoke tmpRef.<java.io.PrintStream: void println(long)>(tmp);
        x = temp$0;

     label1:
        tmp = <Test1: long gotoCount>;
        tmp = tmp + 1L;
        <Test1: long gotoCount> = tmp;
        tmpRef = <java.lang.System: java.io.PrintStream out>;
        virtualinvoke tmpRef.<java.io.PrintStream: void println(java.lang.String)>("Block #3");
        virtualinvoke tmpRef.<java.io.PrintStream: void println(long)>(tmp);
        nop;

     label2:
        nop;
        temp$1 = x % 4;
        tmp = <Test1: long gotoCount>;
        tmp = tmp + 1L;
        <Test1: long gotoCount> = tmp;
        tmpRef = <java.lang.System: java.io.PrintStream out>;
        virtualinvoke tmpRef.<java.io.PrintStream: void println(java.lang.String)>("Block #4");
        virtualinvoke tmpRef.<java.io.PrintStream: void println(long)>(tmp);
        if temp$1 != 0 goto label3;

        tmp = <Test1: long gotoCount>;
        tmp = tmp + 1L;
        <Test1: long gotoCount> = tmp;
        tmpRef = <java.lang.System: java.io.PrintStream out>;
        virtualinvoke tmpRef.<java.io.PrintStream: void println(java.lang.String)>("Block #5");
        virtualinvoke tmpRef.<java.io.PrintStream: void println(long)>(tmp);
        goto label4;

     label3:
        nop;
        temp$2 = x / 4;
        x = temp$2;
        tmp = <Test1: long gotoCount>;
        tmp = tmp + 1L;
        <Test1: long gotoCount> = tmp;
        tmpRef = <java.lang.System: java.io.PrintStream out>;
        virtualinvoke tmpRef.<java.io.PrintStream: void println(java.lang.String)>("Block #6");
        virtualinvoke tmpRef.<java.io.PrintStream: void println(long)>(tmp);
        goto label2;

     label4:
        nop;
        tmp = <Test1: long gotoCount>;
        tmp = tmp + 1L;
        <Test1: long gotoCount> = tmp;
        tmpRef = <java.lang.System: java.io.PrintStream out>;
        virtualinvoke tmpRef.<java.io.PrintStream: void println(java.lang.String)>("Block #7");
        virtualinvoke tmpRef.<java.io.PrintStream: void println(long)>(tmp);
        return;
    }

    public void <init>()
    {
        Test1 this;
        long tmp;
        java.io.PrintStream tmpRef;
        java.lang.String tmpStr;

        this := @this: Test1;
        specialinvoke this.<java.lang.Object: void <init>()>();
        tmp = <Test1: long gotoCount>;
        tmp = tmp + 1L;
        <Test1: long gotoCount> = tmp;
        tmpRef = <java.lang.System: java.io.PrintStream out>;
        virtualinvoke tmpRef.<java.io.PrintStream: void println(java.lang.String)>("Block #0");
        virtualinvoke tmpRef.<java.io.PrintStream: void println(long)>(tmp);
        return;
    }
}
